<%- include("../partials/user/header.ejs") %>

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">

<style>
  body {
    font-family: 'Arial', sans-serif;
    background-color: #f9f9f9;
    color: #333;
  }

  h2 {
    font-size: 2.5rem;
    font-weight: bold;
    color: #088178;
  }
  h5 {
    color:#ffffff
  }

  .card {
    transition: all 0.3s ease;
    border: none;
    border-radius: 10px;
    overflow: hidden;
  }

  .card:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
  }

  .card-header {
    background: linear-gradient(135deg, #088178, #088178);
    color: white;
    font-size: 1.2rem;
    font-weight: 600;
  }

  .badge {
    font-size: 0.85em;
    padding: 0.5em 0.75em;
    border-radius: 12px;
  }

  .btn-sm {
    font-size: 0.9rem;
    padding: 0.4rem 0.8rem;
    border-radius: 5px;
    transition: transform 0.2s ease, background-color 0.3s ease;
  }

  .btn-sm:hover {
    transform: scale(1.05);
    background-color: #f8f9fa;
  }

  table {
    font-size: 0.95rem;
  }

  .thead-light th {
    background-color: #e9ecef;
    color: #495057;
    font-weight: bold;
  }

  .card-footer {
    background: #f1f1f1;
  }

  .btn-primary {
    background-color: #088178;
    border: none;
  }

  .btn-primary:hover {
    background-color: #088178;
  }
  .pagination-buttons .page-link {
    margin-bottom: 14px;
    padding: 3px 7px;
    border: 1px solid #ddd;
    color: #0a3b38;
    text-decoration: none;
    border-radius: 4px;
    transition: all 0.3s ease;
}

.pagination-buttons .page-link:hover {
    background-color: #f4f4f4;
}

.pagination-buttons .page-link.disabled {
    color: #ccc;
    cursor: not-allowed;
    pointer-events: none;
}

.pagination-buttons .current-page {
    padding: 6px 10px;
    border: 1px solid #ddd;
    background-color: #096e68; /* Matches your active page style */
    color: white;
    border-radius: 4px;
}
  .modal {
  transition: none;
}

.modal-dialog {
  transform: none !important;
}

.card:hover {
  transform: translateY(-5px);
}

.modal-open .card:hover {
  transform: none;
  pointer-events: none;
}

  
</style>

<div id="preloader-active">
  <div class="preloader d-flex align-items-center justify-content-center">
      <div class="preloader-inner position-relative">
          <div class="text-center">
              <h5 class="mb-5">Now Loading</h5>
              <div class="loader">
                  <div class="bar bar1"></div>
                  <div class="bar bar2"></div>
                  <div class="bar bar3"></div>
              </div>
          </div>
      </div>
  </div>
</div>

<div class="container my-5">
  <div class="breadcrumb mb-5">
    <a href="/userprofile" rel="nofollow" style="color: #088178;">Profile &nbsp;&nbsp;</a>>&nbsp;&nbsp;
    <span></span>&nbsp;Orders
</div>
  <h2 class="text-center mb-4">Your Orders</h2>
  <div class="row">
    <% orderDetails.forEach(order => { %> 
      <div class="col-12 mb-4">
        <div class="card shadow-sm">
          <div class="card-header">
            <h5 class="mb-0">order_id: #<%= order._id.toString().slice(-6) %></h5>
          </div>
          <div class="card-body">
            <div class="table-responsive">
              <table class="table table-hover">
                <thead class="thead-light">
                  <tr>
                    <th>Ordered Date</th>
                    <th>Product</th>
                    <th>Status</th>
                    <th>Quantity</th>
                    <th>Total</th>
                    <th>Discount</th>
                    <th>Payment Status</th>
                    <th>Payment Method</th>
                    <th>Actions</th>
                    <th>More Details</th>
                  </tr>
                </thead>
                <tbody>
                  <% order.orderedItems.forEach(item => { %>
                    <tr>
                      <td><%= order.createdAt.toDateString() %></td>
                      <td><%= item.product?.productName %></td>
                      <td>
                        <span><%= item.status %></span>
                      </td>
                      <td><%= item.quantity %></td>
                      <td>₹<%= Math.floor(order.totalAmount) %></td>
                      <td>₹<%= Math.floor(order.discount || 0) %></td>
                      <td>
                        <% if(order.paymentStatus === 'Pending' && item.status !== 'Cancelled' && item.status !== 'Delivered' && item.status !== 'Return') { %>
                          <a href="#" class="btn retry-payment-btn" data-order-id="<%= order._id %>">Pay Now</a>
                        <% } else { %>
                          <%= order.paymentStatus %>
                        <% } %>
                      </td>
                      <td><%= order.paymentMethod %></td>
                      <td>
                        <% if (item.status === 'Pending' || item.status === 'Shipped') { %>
                          <button type="button" class="btn btn-danger btn-sm" onclick="confirmCancel('<%= order._id %>', '<%= item.product._id %>')">
                            Cancel
                          </button>
                        <% } else if (item.status === 'Cancelled') { %>
                          <span class="text-danger">Cancelled</span>
                        <% } else if (item.status === 'Delivered') { %>
                          <button type="button" class="btn btn-warning btn-sm" data-bs-toggle="modal" data-bs-target="#returnModal<%= item.product._id %>">
                            Return
                          </button>
                          
                          <!-- Return Modal -->
                          <div class="modal fade" id="returnModal<%= item.product._id %>" tabindex="-1"
                            aria-labelledby="returnModalLabel<%= item.product._id %>" aria-hidden="true">
                            <div class="modal-dialog">
                              <div class="modal-content">
                                <div class="modal-header">
                                  <h5 class="modal-title" id="returnModalLabel<%= item.product._id %>">Reason for return</h5>
                                  <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                </div>
                                <form id="form-returnModal<%= item.product._id %>"
                                  action="/orders/<%= order._id %>/products/<%= item.product._id %>/return" method="POST"
                                  onsubmit="submitReturn('form-returnModal<%= item.product._id %>'); return false;">
                                  <div class="modal-body">
                                    <div class="mb-3">
                                      <label for="returnReason<%= item.product._id %>" class="form-label">Please provide the reason for your
                                        return</label>
                                      <textarea class="form-control" id="returnReason<%= item.product._id %>" name="reason" rows="3"></textarea>
                                    </div>
                                  </div>
                                  <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                                    <button type="submit" class="btn btn-primary">Submit Return</button>
                                  </div>
                                </form>
                              </div>
                            </div>
                          </div>
                        <% } else if (item.status === 'Return') { %>
                          <span class="text-warning" style="color: #fd7e14 !important;">Returned</span>
                        <% } %>
                      </td>
                      <td><a href="/invoice?orderId=<%=order._id%>">View Details</a></td>
                    </tr>
                  <% }) %>
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>
    <% }) %>
  </div>
</div>

<div class="pagination-buttons" style="display: flex; justify-content: center; align-items: center; margin-top: 15px; gap: 10px;">
  <% if (currentPage > 1) { %>
      <a href="?page=<%= currentPage - 1 %><%= locals.search ? '&search=' + locals.search : '' %>" class="page-link">Previous</a>
  <% } else { %>
      <span class="page-link disabled">Previous</span>
  <% } %>
  <span class="page-link current-page"><%= currentPage %></span>
  <% if (currentPage < totalPages) { %>
      <a href="?page=<%= currentPage + 1 %><%= locals.search ? '&search=' + locals.search : '' %>" class="page-link"><%= currentPage + 1 %></a>
      <a href="?page=<%= currentPage + 1 %><%= locals.search ? '&search=' + locals.search : '' %>" class="page-link">Next</a>
  <% } else { %>
      <span class="page-link"><%= currentPage %></span>
      <span class="page-link disabled">Next</span>
  <% } %>
</div>

<%- include("../partials/user/footer.ejs") %>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>


<script>
function confirmCancel(orderId, product) {
  Swal.fire({
    title: 'Are you sure?',
    text: "Do you want to cancel this product?",
    icon: 'warning',
    showCancelButton: true,
    confirmButtonColor: '#d33',
    cancelButtonColor: '#3085d6',
    confirmButtonText: 'Yes, cancel it!',
    cancelButtonText: 'No, keep it'
  }).then((result) => {
    if (result.isConfirmed) {
      cancelProduct(orderId, product);
    }
  });
}

function cancelProduct(orderId, product) {
    console.log(`Cancelling order: ${orderId}, product: ${product}`);

    fetch(`/orders/${orderId}/products/${product}/cancel`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        }
    })
    .then(response => response.json())
    .then(data => {
        console.log("Cancel response data:", data);
        if (data.success) {
            Swal.fire({
                title: 'Cancelled!',
                text: 'Your product has been cancelled and refund processed if applicable.',
                icon: 'success',
                timer: 2000,
                showConfirmButton: false
            }).then(() => {
                window.location.href = '/orderDetaile';
            });
        } else {
            Swal.fire({
                title: 'Error!',
                text: data.message || 'Failed to cancel the product.',
                icon: 'error'
            });
        }
    })
    .catch(error => {
        console.error('Fetch error:', error);
        Swal.fire({
            title: 'Error!',
            text: 'Something went wrong. Please try again.',
            icon: 'error'
        });
    });
}

function submitReturn(formId) {
    event.preventDefault();

    const form = document.getElementById(formId);
    const reasonId = formId.replace('form-', '').replace('Modal', 'Reason');
    const reasonTextarea = document.getElementById(reasonId);
    const reasonValue = reasonTextarea.value;
    
    // Validation checks
    // 1. Check if field is empty or contains only spaces
    if (!reasonValue || reasonValue.trim() === '') {
        Swal.fire({
            title: 'Validation Error',
            text: 'Please provide a return reason. This field is required.',
            icon: 'warning'
        });
        reasonTextarea.focus();
        return false;
    }
    
    // 2. Check for leading or trailing spaces
    if (reasonValue !== reasonValue.trim()) {
        Swal.fire({
            title: 'Validation Error',
            text: 'Please remove any leading or trailing spaces from your return reason.',
            icon: 'warning'
        });
        reasonTextarea.focus();
        return false;
    }
    
    // 3. Check if input contains only numbers (this is allowed)
    if (/^\d+$/.test(reasonValue)) {
        // Valid number-only input, allow it to continue
    } else if (/\d/.test(reasonValue) && /[^\d\s]/.test(reasonValue)) {
        // Contains both numbers and non-number characters (excluding spaces)
        // This is valid mixed content
    } else if (!/\d/.test(reasonValue)) {
        // Contains no numbers at all (just text/spaces)
        // This is valid text-only content
    } else {
        // Invalid format - contains some numbers but not in a valid pattern
        Swal.fire({
            title: 'Validation Error',
            text: 'If providing only numbers, please ensure there are no letters mixed in.',
            icon: 'warning'
        });
        reasonTextarea.focus();
        return false;
    }

    // If validation passes, continue with form submission
    const formData = new FormData(form);
    const url = form.getAttribute('action');

    console.log("Submitting return form to:", url);
    console.log("Form data:", Object.fromEntries(formData));

    fetch(url, {
        method: 'POST',
        body: formData
    })
    .then(response => response.json())
    .then(data => {
        console.log("Return response data:", data);
        const modalId = formId.replace('form-', '');
        const modalElement = document.getElementById(modalId);
        if (modalElement) {
            const modal = bootstrap.Modal.getInstance(modalElement);
            if (modal) {
                modal.hide();
            }
        }

        if (data.success) {
            Swal.fire({
                title: 'Returned',
                text: 'Your return request has been submitted successfully and refund processed if applicable.',
                icon: 'success',
                timer: 2000,
                showConfirmButton: false
            }).then(() => {
                window.location.href = '/orderDetaile';
            });
        } else {
            Swal.fire({
                title: 'Error!',
                text: data.message || 'Failed to process return.',
                icon: 'error'
            });
        }
    })
    .catch(error => {
        console.error('Fetch error:', error);
        Swal.fire({
            title: 'Error!',
            text: 'Something went wrong. Please try again.',
            icon: 'error'
        });
    });
}

// document.getElementById('retryPaymentBtn')?.addEventListener('click', async function () {
//     const orderId = this.getAttribute('data-order-id');
//     const response = await fetch(`/retry-payment/${orderId}`, {
//         method: 'POST',
//         headers: { 'Content-Type': 'application/json' },
//     });

//     const result = await response.json();
//     if (!result.success) {
//         Swal.fire({ icon: 'error', title: 'Error', text: result.message });
//         return;
//     }

//     const options = {
//         key: result.key,
//         amount: result.amount.toString(),
//         currency: result.currency,
//         name: "Aurum Scents",
//         description: "Retry Payment",
//         order_id: result.orderId,
//         handler: async function (response) {
//             const verifyResponse = await fetch('/verify-payment', {
//                 method: 'POST',
//                 headers: { 'Content-Type': 'application/json' },
//                 body: JSON.stringify({
//                     razorpay_payment_id: response.razorpay_payment_id,
//                     razorpay_order_id: response.razorpay_order_id,
//                     razorpay_signature: response.razorpay_signature,
//                     dbOrderId: result.dbOrderId
//                 })
//             });

//             const verifyResult = await verifyResponse.json();
//             if (verifyResult.success) {
//                 Swal.fire({
//                     icon: 'success',
//                     title: 'Payment Successful',
//                     text: 'Your payment was successful!',
//                     timer: 2000,
//                     showConfirmButton: false
//                 }).then(() => {
//                     window.location.reload();
//                 });
//             }
//         },
//         modal: {
//             ondismiss: function () {
//                 Swal.fire({icon: 'info', title: 'Payment Cancelled', text: 'Payment was not completed.' });
//             }
//         }
//     };

//     const rzp1 = new Razorpay(options);
//     rzp1.on('payment.failed', function () {
//         Swal.fire({ icon: 'error', title: 'Payment Failed', text: 'Please try again.' });
//     });
//     rzp1.open();
// })
document.addEventListener('DOMContentLoaded', function () {
    document.querySelectorAll('.retry-payment-btn').forEach(button => {
        button.addEventListener('click', async function (event) {
            event.preventDefault(); // Prevent default link behavior
            const orderId = this.getAttribute('data-order-id');
            
            if (!orderId) {
                Swal.fire({ icon: 'error', title: 'Error', text: 'Order ID is missing!' });
                return;
            }

            const response = await fetch(`/retry-payment/${orderId}`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
            });

            const result = await response.json();
            if (!result.success) {
                Swal.fire({ icon: 'error', title: 'Error', text: result.message });
                return;
            }

            const options = {
                key: result.key,
                amount: result.amount.toString(),
                currency: result.currency,
                name: "Aurum Scents",
                description: "Retry Payment",
                order_id: result.orderId,
                handler: async function (response) {
                    const verifyResponse = await fetch('/verify-payment', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            razorpay_payment_id: response.razorpay_payment_id,
                            razorpay_order_id: response.razorpay_order_id,
                            razorpay_signature: response.razorpay_signature,
                            dbOrderId: result.dbOrderId
                        })
                    });

                    const verifyResult = await verifyResponse.json();
                    if (verifyResult.success) {
                        Swal.fire({
                            icon: 'success',
                            title: 'Payment Successful',
                            text: 'Your payment was successful!',
                            timer: 2000,
                            showConfirmButton: false
                        }).then(() => {
                            window.location.reload();
                        });
                    }
                },
                modal: {
                    ondismiss: function () {
                        Swal.fire({icon: 'info', title: 'Payment Cancelled', text: 'Payment was not completed.' });
                    }
                }
            };

            const rzp1 = new Razorpay(options);
            rzp1.on('payment.failed', function () {
                Swal.fire({ icon: 'error', title: 'Payment Failed', text: 'Please try again.' });
            });
            rzp1.open();
        });
    });
});


</script>
