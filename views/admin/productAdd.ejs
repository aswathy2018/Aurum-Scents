<%- include('../partials/admin/adminHeader.ejs') %>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/croppie/2.6.5/croppie.min.css" />
    <link rel="stylesheet" href="/assets/css/adProductAdd.css">

    <!-- Main Content -->
    <main class="content-main">
        <div class="content-header">
            <h1 class="content-title">Add New Product</h1>
        </div>
        <div class="card">
            <div class="card-body">
                <form method="post" action="/admin/productAdd" enctype="multipart/form-data"
                    onsubmit="return validateForm()">
                    <div class="form-group">
                        <label for="product_name" class="form-label">Product Name</label>
                        <input type="text" placeholder="Type here" name="productName" class="form-control"
                            id="product_name">
                        <div id="productName-error" class="error-message"></div>
                    </div>
                    <div class="form-group">
                        <label class="form-label">Brand</label>
                        <div class="dropdown-container">
                            <select class="form-control" name="brand">
                                <option value="" selected disabled>Select a Brand</option>
                                <% for (let i=0; i < brand.length; i++) { %>
                                    <option value="<%= brand[i].brandName %>">
                                        <%= brand[i].brandName %>
                                    </option>
                                    <% } %>
                            </select>
                            <span class="dropdown-arrow">▼</span>
                        </div>
                        <div id="brand-error" class="error-message"></div>
                    </div>

                    <div class="form-group">
                        <label class="form-label">Category</label>
                        <div class="dropdown-container">
                            <select class="form-control" name="category">
                                <option value="" selected disabled>Select a Category</option>
                                <% for (let i=0; i < cat.length; i++) { %>
                                    <option value="<%= cat[i].name %>">
                                        <%= cat[i].name %>
                                    </option>
                                    <% } %>
                            </select>
                            <span class="dropdown-arrow">▼</span>
                        </div>
                        <div id="category-error" class="error-message"></div>
                    </div>
                    <div class="form-group">
                        <label class="form-label">Full Description</label>
                        <textarea placeholder="Type here" name="description" class="form-control" rows="4"></textarea>
                        <div id="description-error" class="error-message"></div>
                    </div>

                    <div class="card mb-1">
                        <div class="card-header">
                            <h4>Upload Images</h4>
                        </div>

                        <div class="border">
                            <div id="addedImagesContainer" class="thumbnails-container"></div>
                        </div>

                        <!-- Component 1 -->
                        <div class="card p-3 mb-4">
                            <h5>Image 1</h5>
                            <div class="mb-3">
                                <input class="form-control" type="file" name="images" id="input1"
                                    accept="image/png, image/jpeg, image/jpg">
                            </div>
                            <div class="d-flex gap-3">
                                <div class="border rounded bg-light position-relative overflow-hidden"
                                    style="width: 300px; height: 300px;">
                                    <img src="/placeholder.svg" alt="Preview Image" id="imgView1"
                                        class="img-fluid w-100 h-100 position-absolute" style="object-fit: cover;">
                                </div>
                                <div id="croppie-container-1" class="border" style="width: 300px; height: 300px;"></div>
                                <div id="result-1"
                                    class="d-none border rounded bg-light d-flex justify-content-center align-items-center"
                                    style="width: 300px; height: 300px;">
                                    <img src="/placeholder.svg" id="croppedImg1" alt="Cropped Image" class="img-fluid"
                                        style="object-fit: contain;">
                                </div>
                            </div>
                            <div class="mt-3">
                                <button type="button" id="crop-button-1" class="btn btn-primary me-2">Crop
                                    Image</button>
                                <button type="button" id="save-button-1" class="btn btn-success">Save</button>
                            </div>
                        </div>

                        <!-- Component 2 -->
                        <div class="card p-3 mb-4">
                            <h5>Image 2</h5>
                            <div class="mb-3">
                                <input class="form-control" type="file" name="images" id="input2"
                                    accept="image/png, image/jpeg, image/jpg">
                            </div>
                            <div class="d-flex gap-3">
                                <div class="border rounded bg-light position-relative overflow-hidden"
                                    style="width: 300px; height: 300px;">
                                    <img src="/placeholder.svg" alt="Preview Image" id="imgView2"
                                        class="img-fluid w-100 h-100 position-absolute" style="object-fit: cover;">
                                </div>
                                <div id="croppie-container-2" class="border" style="width: 300px; height: 300px;"></div>
                                <div id="result-2"
                                    class="d-none border rounded bg-light d-flex justify-content-center align-items-center"
                                    style="width: 300px; height: 300px;">
                                    <img src="/placeholder.svg" id="croppedImg2" alt="Cropped Image" class="img-fluid"
                                        style="object-fit: contain;">
                                </div>
                            </div>
                            <div class="mt-3">
                                <button type="button" id="crop-button-2" class="btn btn-primary me-2">Crop
                                    Image</button>
                                <button type="button" id="save-button-2" class="btn btn-success">Save</button>
                            </div>
                        </div>

                        <!-- Component 3 -->
                        <div class="card p-3 mb-4">
                            <h5>Image 3</h5>
                            <div class="mb-3">
                                <input class="form-control" type="file" name="images" id="input3"
                                    accept="image/png, image/jpeg, image/jpg">
                            </div>
                            <div class="d-flex gap-3">
                                <div class="border rounded bg-light position-relative overflow-hidden"
                                    style="width: 300px; height: 300px;">
                                    <img src="/placeholder.svg" alt="Preview Image" id="imgView3"
                                        class="img-fluid w-100 h-100 position-absolute" style="object-fit: cover;">
                                </div>
                                <div id="croppie-container-3" class="border" style="width: 300px; height: 300px;"></div>
                                <div id="result-3"
                                    class="d-none border rounded bg-light d-flex justify-content-center align-items-center"
                                    style="width: 300px; height: 300px;">
                                    <img src="/placeholder.svg" id="croppedImg3" alt="Cropped Image" class="img-fluid"
                                        style="object-fit: contain;">
                                </div>
                            </div>
                            <div class="mt-3">
                                <button type="button" id="crop-button-3" class="btn btn-primary me-2">Crop
                                    Image</button>
                                <button type="button" id="save-button-3" class="btn btn-success">Save</button>
                            </div>
                        </div>

                        <!-- Component 4 -->
                        <div class="card p-3 mb-4">
                            <h5>Image 4</h5>
                            <div class="mb-3">
                                <input class="form-control" type="file" name="images" id="input4"
                                    accept="image/png, image/jpeg, image/jpg">
                            </div>
                            <div class="d-flex gap-3">
                                <div class="border rounded bg-light position-relative overflow-hidden"
                                    style="width: 300px; height: 300px;">
                                    <img src="/placeholder.svg" alt="Preview Image" id="imgView4"
                                        class="img-fluid w-100 h-100 position-absolute" style="object-fit: cover;">
                                </div>
                                <div id="croppie-container-4" class="border" style="width: 300px; height: 300px;"></div>
                                <div id="result-4"
                                    class="d-none border rounded bg-light d-flex justify-content-center align-items-center"
                                    style="width: 300px; height: 300px;">
                                    <img src="/placeholder.svg" id="croppedImg4" alt="Cropped Image" class="img-fluid"
                                        style="object-fit: contain;">
                                </div>
                            </div>
                            <div class="mt-3">
                                <button type="button" id="crop-button-4" class="btn btn-primary me-2">Crop
                                    Image</button>
                                <button type="button" id="save-button-4" class="btn btn-success">Save</button>
                            </div>
                        </div>
                    </div>


                    <div class="form-group variant-section">
                        <label class="form-label">Variants</label>
                        <div id="variants-container">
                            <div class="variant-item">
                                <div class="variant-header">
                                    <h4>ML</h4>
                                    <div class="ml-options">
                                        <select name="variants[0][size]" class="form-control size-select">
                                            <option value="50">50ml</option>
                                            <option value="100">100ml</option>
                                            <option value="200">200ml</option>
                                        </select>
                                    </div>
                                </div>

                                <div class="variant-details">
                                    <div class="form-group">
                                        <label class="form-label">Stock quantity</label>
                                        <input type="number" name="variants[0][stock]" class="form-control"
                                            placeholder="Enter quantity">
                                    </div>

                                    <div class="variant-prices">
                                        <div class="form-group">
                                            <label class="form-label">Regular Price</label>
                                            <div class="price-input">
                                                <span class="currency">₹</span>
                                                <input type="number" name="variants[0][regularPrice]"
                                                    class="form-control" placeholder="₹1000">
                                            </div>
                                        </div>

                                        <div class="form-group">
                                            <label class="form-label">Sale Price</label>
                                            <div class="price-input">
                                                <span class="currency">₹</span>
                                                <input type="number" name="variants[0][salePrice]" class="form-control"
                                                    placeholder="₹2500">
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <button type="button" id="add-variant" class="btn btn-outline">
                            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"
                                fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round"
                                stroke-linejoin="round">
                                <line x1="12" y1="5" x2="12" y2="19"></line>
                                <line x1="5" y1="12" x2="19" y2="12"></line>
                            </svg>
                            Add variant
                        </button>
                    </div>
            </div>
            <div>
                <button class="btn btn-primary" type="submit">Publish</button>
            </div>
            </form>
        </div>
        </div>
    </main>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/croppie/2.6.5/croppie.min.js"></script>

    <script>

        const components = [1, 2, 3, 4]; // Define all component IDs

        components.forEach(id => {
            let croppie;

            const input = document.getElementById(`input${id}`);
            const previewImage = document.getElementById(`imgView${id}`);
            const croppieContainer = document.getElementById(`croppie-container-${id}`);
            const resultContainer = document.getElementById(`result-${id}`);
            const cropButton = document.getElementById(`crop-button-${id}`);
            const saveButton = document.getElementById(`save-button-${id}`);
            const croppedImg = document.getElementById(`croppedImg${id}`);

            input.addEventListener('change', function () {
                if (this.files && this.files[0]) {
                    const reader = new FileReader();
                    reader.onload = function (e) {
                        previewImage.src = e.target.result;
                        initCroppie(e.target.result);
                    };
                    reader.readAsDataURL(this.files[0]);
                }
            });

            function initCroppie(imageData) {
                if (croppie) {
                    croppie.destroy();
                }
                croppie = new Croppie(croppieContainer, {
                    viewport: { width: 200, height: 200, type: 'square' },
                    boundary: { width: 300, height: 300 },
                    showZoomer: true,
                });
                croppie.bind({ url: imageData });
            }

            cropButton.addEventListener('click', function () {
                if (croppie) {
                    croppie.result({
                        type: 'canvas',
                        size: 'viewport',
                    }).then(function (croppedImage) {
                        croppedImg.src = croppedImage;
                        resultContainer.classList.remove('d-none');
                    });
                }
            });

            saveButton.addEventListener('click', function () {
                if (croppedImg.src) {
                    console.log(`Component ${id}: Cropped image ready.`);
                }
            });
        });




        document.addEventListener("DOMContentLoaded", function () {
            const form = document.querySelector("form");
            const errorClass = "text-red-500 text-sm mt-1";

            // Function to create/update error message
            function showError(field, message) {
                let errorDiv = field.nextElementSibling;
                if (!errorDiv || !errorDiv.classList.contains("error-message")) {
                    errorDiv = document.createElement("div");
                    errorDiv.className = `error-message ${errorClass}`;
                    field.parentNode.insertBefore(errorDiv, field.nextSibling);
                }
                errorDiv.textContent = message;
                return false;
            }

            // Function to clear error message
            function clearError(field) {
                const errorDiv = field.nextElementSibling;
                if (errorDiv && errorDiv.classList.contains("error-message")) {
                    errorDiv.textContent = "";
                }
            }

            // Enhanced function to validate product name
            function validateProductName(field) {
                const value = field.value;
                const trimmedValue = value.trim();

                // Check for empty value
                if (!trimmedValue) {
                    return showError(field, "Product name is required");
                }

                // Check for leading spaces
                if (value.startsWith(' ')) {
                    return showError(field, "Product name cannot start with space");
                }

                // Check for spaces only
                if (/^\s*$/.test(value)) {
                    return showError(field, "Product name cannot contain only spaces");
                }

                // Check for multiple consecutive spaces
                // if (/\s\s+/.test(value)) {
                //     return showError(field, "Product name cannot contain consecutive spaces");
                // }

                // Check for trailing spaces
                if (value.endsWith(' ')) {
                    return showError(field, "Product name cannot end with space");
                }

                // Check for minimum length (after trimming)
                if (trimmedValue.length < 3) {
                    return showError(field, "Product name must be at least 3 characters long");
                }

                // Check for maximum length
                if (trimmedValue.length > 100) {
                    return showError(field, "Product name cannot exceed 100 characters");
                }

                // Check for special characters
                if (!/^[a-zA-Z0-9\s-&()]+$/.test(value)) {
                    return showError(field, "Product name can only contain letters, numbers, spaces, hyphens, ampersands and parentheses");
                }

                clearError(field);
                return true;
            }

            // Enhanced function to validate description
            function validateDescription(field) {
                const value = field.value;
                const trimmedValue = value.trim();

                // Check for empty value
                if (!trimmedValue) {
                    return showError(field, "Description is required");
                }

                // Check for leading spaces
                if (value.startsWith(' ')) {
                    return showError(field, "Description cannot start with space");
                }

                // Check for spaces only
                if (/^\s*$/.test(value)) {
                    return showError(field, "Description cannot contain only spaces");
                }

                // Check for multiple consecutive spaces
                // if (/\s\s\s+/.test(value)) {
                //     return showError(field, "Description cannot contain more than two consecutive spaces");
                // }

                // Check for minimum length (after trimming)
                if (trimmedValue.length < 8) {
                    return showError(field, "Description must be at least 8 characters long");
                }

                // Check for maximum length
                if (trimmedValue.length > 1000) {
                    return showError(field, "Description cannot exceed 1000 characters");
                }

                // Check for trailing spaces
                if (value.endsWith(' ')) {
                    return showError(field, "Description cannot end with space");
                }

                clearError(field);
                return true;
            }

            // Function to validate dropdown selections
            function validateDropdown(field, fieldName) {
                if (!field.value) return showError(field, `${fieldName} is required`);
                clearError(field);
                return true;
            }

            // Enhanced function to validate number inputs
            function validateNumber(field, fieldName) {
                const value = field.value.trim();

                // Check for empty value
                if (!value) {
                    return showError(field, `${fieldName} is required`);
                }

                // Check if it's a valid number
                if (!/^\d+$/.test(value)) {
                    return showError(field, `${fieldName} must contain only digits`);
                }

                // Check for leading zeros
                if (value.length > 1 && value[0] === '0') {
                    return showError(field, `${fieldName} cannot start with 0`);
                }

                // Check if it's positive
                if (parseInt(value) <= 0) {
                    return showError(field, `${fieldName} must be a positive number`);
                }

                // Add maximum limit based on field type
                if (fieldName.toLowerCase().includes('price')) {
                    if (parseInt(value) > 1000000) {
                        return showError(field, `${fieldName} cannot exceed 1,000,000`);
                    }
                } else if (fieldName.toLowerCase().includes('stock')) {
                    if (parseInt(value) > 10000) {
                        return showError(field, `${fieldName} cannot exceed 10,000`);
                    }
                }

                clearError(field);
                return true;
            }

            // Enhanced function to validate image files
            function validateImage(field) {
                if (field.files.length > 0) {
                    const file = field.files[0];
                    const allowedTypes = ["image/jpeg", "image/jpg", "image/png"];

                    // Check file type
                    if (!allowedTypes.includes(file.type)) {
                        return showError(field, "Only JPG, JPEG, and PNG files are allowed");
                    }

                    // Check file size (max 5MB)
                    const maxSize = 5 * 1024 * 1024; // 5MB in bytes
                    if (file.size > maxSize) {
                        return showError(field, "Image size should not exceed 5MB");
                    }

                    clearError(field);
                    return true;
                }
                return true;
            }

            // Add input event listeners for real-time validation
            const productName = document.getElementById("product_name");
            const description = document.querySelector("textarea[name='description']");
            const brand = document.querySelector("select[name='brand']");
            const category = document.querySelector("select[name='category']");
            const fileInputs = document.querySelectorAll("input[type='file']");

            // Real-time validation with debounce
            function debounce(func, wait) {
                let timeout;
                return function (...args) {
                    clearTimeout(timeout);
                    timeout = setTimeout(() => func.apply(this, args), wait);
                };
            }

            // Add input listeners with debounce
            productName.addEventListener("input", debounce(() => validateProductName(productName), 300));
            description.addEventListener("input", debounce(() => validateDescription(description), 300));
            brand.addEventListener("change", () => validateDropdown(brand, "Brand"));
            category.addEventListener("change", () => validateDropdown(category, "Category"));
            fileInputs.forEach(input => {
                input.addEventListener("change", () => validateImage(input));
            });

            // Prevent paste of formatted text in description
            description.addEventListener("paste", function (e) {
                e.preventDefault();
                const text = (e.originalEvent || e).clipboardData.getData('text/plain');
                document.execCommand("insertText", false, text);
            });

            // Enhanced variant validation
            function validateVariants() {
                let isValid = true;
                document.querySelectorAll(".variant-item").forEach((variant, index) => {
                    const stock = variant.querySelector(`input[name='variants[${index}][stock]']`);
                    const regularPrice = variant.querySelector(`input[name='variants[${index}][regularPrice]']`);
                    const salePrice = variant.querySelector(`input[name='variants[${index}][salePrice]']`);

                    isValid = validateNumber(stock, "Stock quantity") && isValid;
                    isValid = validateNumber(regularPrice, "Regular price") && isValid;

                    if (salePrice && salePrice.value.trim()) {
                        if (parseFloat(salePrice.value) >= parseFloat(regularPrice.value)) {
                            isValid = showError(salePrice, "Sale price must be less than regular price") && isValid;
                        } else {
                            isValid = validateNumber(salePrice, "Sale price") && isValid;
                        }
                    }
                });
                return isValid;
            }

            // Form submission handler
            form.addEventListener("submit", function (event) {
                event.preventDefault();
                let isValid = true;

                // Validate all fields
                isValid = validateProductName(productName) && isValid;
                isValid = validateDescription(description) && isValid;
                isValid = validateDropdown(brand, "Brand") && isValid;
                isValid = validateDropdown(category, "Category") && isValid;

                // Validate at least one image is selected
                let hasImage = false;
                fileInputs.forEach(input => {
                    if (input.files.length > 0) {
                        hasImage = true;
                        isValid = validateImage(input) && isValid;
                    }
                });

                if (!hasImage) {
                    isValid = showError(fileInputs[0], "At least one image is required") && isValid;
                }

                // Validate variants
                isValid = validateVariants() && isValid;

                if (isValid) {
                    form.submit();
                }
            });
        });


        document.getElementById('add-variant').addEventListener('click', function () {
            const container = document.getElementById('variants-container');
            const variantCount = container.children.length;

            const newVariant = document.createElement('div');
            newVariant.className = 'variant-item';
            newVariant.innerHTML = `
            <div class="variant-header">
                <h4>ML</h4>
                <div class="ml-options">
                    <select name="variants[${variantCount}][size]" class="form-control size-select">
                        <option value="50">50ml</option>
                        <option value="100">100ml</option>
                        <option value="200">200ml</option>
                    </select>
                </div>
            </div>
            
            <div class="variant-details">
                <div class="form-group">
                    <label class="form-label">Stock quantity</label>
                    <input type="number" name="variants[${variantCount}][stock]" class="form-control" placeholder="Enter quantity">
                </div>
                
                <div class="variant-prices">
                    <div class="form-group">
                        <label class="form-label">Regular Price</label>
                        <div class="price-input">
                            <span class="currency">₹</span>
                            <input type="number" name="variants[${variantCount}][regularPrice]" class="form-control" placeholder="₹1000">
                        </div>
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">Sale Price</label>
                        <div class="price-input">
                            <span class="currency">₹</span>
                            <input type="number" name="variants[${variantCount}][salePrice]" class="form-control" placeholder="₹2500">
                        </div>
                    </div>
                </div>
            </div>
        `;

            container.appendChild(newVariant);
        });
    </script>

    <%- include('../partials/admin/adminFooter.ejs') %>