<%- include('../partials/admin/adminHeader.ejs') %>
<style>
    .image-preview {
    display: none;
}

</style>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/croppie/2.6.5/croppie.min.css" />
    <link rel="stylesheet" href="/assets/css/adProductAdd.css">
    <!-- Add SweetAlert2 CDN -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <!-- Main Content -->
    <main class="content-main">
        <div class="content-header">
            <h1 class="content-title">Add New Product</h1>
        </div>
        <div class="card">
            <div class="card-body">
                <form method="post" action="/admin/productAdd" enctype="multipart/form-data" id="productForm">
                    <div class="form-group">
                        <label for="product_name" class="form-label">Product Name</label>
                        <input type="text" placeholder="Type here" name="productName" class="form-control"
                            id="product_name">
                        <div id="productName-error" class="error-message"></div>
                    </div>
                    <div class="form-group">
                        <label class="form-label">Brand</label>
                        <div class="dropdown-container">
                            <select class="form-control" name="brand" id="brand">
                                <option value="" selected disabled>Select a Brand</option>
                                <% for (let i=0; i < brand.length; i++) { %>
                                    <option value="<%= brand[i].brandName %>">
                                        <%= brand[i].brandName %>
                                    </option>
                                    <% } %>
                            </select>
                            <span class="dropdown-arrow">▼</span>
                        </div>
                        <div id="brand-error" class="error-message"></div>
                    </div>

                    <div class="form-group">
                        <label class="form-label">Category</label>
                        <div class="dropdown-container">
                            <select class="form-control" name="category" id="category">
                                <option value="" selected disabled>Select a Category</option>
                                <% for (let i=0; i < cat.length; i++) { %>
                                    <option value="<%= cat[i].name %>">
                                        <%= cat[i].name %>
                                    </option>
                                    <% } %>
                            </select>
                            <span class="dropdown-arrow">▼</span>
                        </div>
                        <div id="category-error" class="error-message"></div>
                    </div>
                    <div class="form-group">
                        <label class="form-label">Full Description</label>
                        <textarea placeholder="Type here" name="description" class="form-control" rows="4" id="description"></textarea>
                        <div id="description-error" class="error-message"></div>
                    </div>

                    <div class="card mb-1">
                        <div class="card-header">
                            <h4>Upload Images</h4>
                        </div>

                        <div class="border">
                            <div id="addedImagesContainer" class="thumbnails-container"></div>
                        </div>

                        <!-- Component 1 -->
                        <div class="card p-3 mb-4">
                            <h5>Image 1</h5>
                            <div class="mb-3">
                                <input class="form-control" type="file" name="images" id="input1"
                                    accept="image/png, image/jpeg, image/jpg">
                                <div id="images-error" class="error-message"></div>
                            </div>
                            <div class="d-flex gap-3">
                                <div class="image-preview" id="preview-container-1">
                                    <div class="d-flex gap-3">
                                        <!-- Preview and croppie container code here -->
                                        <div class="border rounded bg-light position-relative overflow-hidden"
                                        style="width: 300px; height: 300px;">
                                        <img id="imgView1"
                                            class="img-fluid w-100 h-100 position-absolute" style="object-fit: cover;">
                                    </div>
                                    <div id="croppie-container-1" class="border" style="width: 300px; height: 300px;"></div>
                                    <div id="result-1"
                                        class="d-none border rounded bg-light d-flex justify-content-center align-items-center"
                                        style="width: 300px; height: 300px;">
                                        <img src="/placeholder.svg" id="croppedImg1" alt="Cropped Image" class="img-fluid"
                                            style="object-fit: contain;">
                                    </div>
                                    </div>
                                </div>
                            </div>
                            <div class="mt-3">
                                <button type="button" id="crop-button-1" class="btn btn-primary me-2">Crop
                                    Image</button>
                            </div>
                        </div>

                        <!-- Component 2 -->
                        <div class="card p-3 mb-4">
                            <h5>Image 2</h5>
                            <div class="mb-3">
                                <input class="form-control" type="file" name="images" id="input2" accept="image/png, image/jpeg, image/jpg">
                            </div>
                            <div class="d-flex gap-3">
                                <div class="image-preview" id="preview-container-2">
                                    <div class="d-flex gap-3">
                                        <!-- Preview and croppie container code here -->
                                <div class="border rounded bg-light position-relative overflow-hidden" style="width: 300px; height: 300px;">
                                    <img id="imgView2" class="img-fluid w-100 h-100 position-absolute" style="object-fit: cover;">
                                </div>
                                <div id="croppie-container-2" class="border" style="width: 300px; height: 300px;"></div>
                                <div id="result-2" class="d-none border rounded bg-light d-flex justify-content-center align-items-center" style="width: 300px; height: 300px;">
                                    <img src="/placeholder.svg" id="croppedImg2" alt="Cropped Image" class="img-fluid" style="object-fit: contain;">
                                </div>
                                </div>
                            </div>
                            </div>
                            <div class="mt-3">
                                <button type="button" id="crop-button-2" class="btn btn-primary me-2">Crop Image</button>
                            </div>
                        </div>
                        
                        <!-- Component 3 -->
                        <div class="card p-3 mb-4">
                            <h5>Image 3</h5>
                            <div class="mb-3">
                                <input class="form-control" type="file" name="images" id="input3" accept="image/png, image/jpeg, image/jpg">
                            </div>
                            <div class="d-flex gap-3">
                                <div class="image-preview" id="preview-container-3">
                                    <div class="d-flex gap-3">
                                        <!-- Preview and croppie container code here -->
                                <div class="border rounded bg-light position-relative overflow-hidden" style="width: 300px; height: 300px;">
                                    <img id="imgView3" class="img-fluid w-100 h-100 position-absolute" style="object-fit: cover;">
                                </div>
                                <div id="croppie-container-3" class="border" style="width: 300px; height: 300px;"></div>
                                <div id="result-3" class="d-none border rounded bg-light d-flex justify-content-center align-items-center" style="width: 300px; height: 300px;">
                                    <img src="/placeholder.svg" id="croppedImg3" alt="Cropped Image" class="img-fluid" style="object-fit: contain;">
                                </div>
                                </div>
                            </div>
                            </div>
                            <div class="mt-3">
                                <button type="button" id="crop-button-3" class="btn btn-primary me-2">Crop Image</button>
                            </div>
                        </div>
                        
                        <!-- Component 4 -->
                        <div class="card p-3 mb-4">
                            <h5>Image 4</h5>
                            <div class="mb-3">
                                <input class="form-control" type="file" name="images" id="input4" accept="image/png, image/jpeg, image/jpg">
                            </div>
                            <div class="d-flex gap-3">
                                <div class="image-preview" id="preview-container-4">
                                    <div class="d-flex gap-3">
                                        <!-- Preview and croppie container code here -->
                                <div class="border rounded bg-light position-relative overflow-hidden" style="width: 300px; height: 300px;">
                                    <img id="imgView4" class="img-fluid w-100 h-100 position-absolute" style="object-fit: cover;">
                                </div>
                                <div id="croppie-container-4" class="border" style="width: 300px; height: 300px;"></div>
                                <div id="result-4" class="d-none border rounded bg-light d-flex justify-content-center align-items-center" style="width: 300px; height: 300px;">
                                    <img id="croppedImg4" class="img-fluid" style="object-fit: contain;">
                                </div>
                                </div>
                            </div>
                            </div>
                            <div class="mt-3">
                                <button type="button" id="crop-button-4" class="btn btn-primary me-2">Crop Image</button>
                            </div>
                        </div>
                    </div>


                    <div class="form-group variant-section">
                        <label class="form-label">Variants</label>
                        <div id="variants-container">
                            <div class="variant-item">
                                <div class="variant-header">
                                    <h4>ML</h4>
                                    <div class="ml-options">
                                        <select name="variants[0][size]" class="form-control size-select">
                                            <option value="50">50ml</option>
                                            <option value="100">100ml</option>
                                            <option value="200">200ml</option>
                                        </select>
                                    </div>
                                </div>

                                <div class="variant-details">
                                    <div class="form-group">
                                        <label class="form-label">Stock quantity</label>
                                        <input type="number" name="variants[0][stock]" class="form-control"
                                            placeholder="Enter quantity">
                                        <div id="variants[0][stock]-error" class="error-message"></div>
                                    </div>

                                    <div class="variant-prices">
                                        <div class="form-group">
                                            <label class="form-label">Regular Price</label>
                                            <div class="price-input">
                                                <span class="currency">₹</span>
                                                <input type="number" name="variants[0][regularPrice]"
                                                    class="form-control" placeholder="₹1000">
                                                <div id="variants[0][regularPrice]-error" class="error-message"></div>
                                            </div>
                                        </div>

                                        <div class="form-group">
                                            <label class="form-label">Sale Price</label>
                                            <div class="price-input">
                                                <span class="currency">₹</span>
                                                <input type="number" name="variants[0][salesPrice]" class="form-control"
                                                    placeholder="₹2500">
                                                <div id="variants[0][salesPrice]-error" class="error-message"></div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div>
                        <button class="btn btn-primary" type="submit" id="submitBtn">Publish</button>
                    </div>
                </div>
            </form>
        </div>
    </main>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/croppie/2.6.5/croppie.min.js"></script>

    <script>
        document.addEventListener("DOMContentLoaded", () => {
    for (let i = 1; i <= 4; i++) {
        const fileInput = document.getElementById(`input${i}`);
        const previewContainer = document.getElementById(`preview-container-${i}`);
        const imgView = document.getElementById(`imgView${i}`);

        if (fileInput) {
            fileInput.addEventListener("change", function () {
                if (this.files && this.files[0]) {
                    const reader = new FileReader();
                    reader.onload = function (e) {
                        imgView.src = e.target.result;
                        previewContainer.style.display = 'block';
                    };
                    reader.readAsDataURL(this.files[0]);
                } else {
                    previewContainer.style.display = 'none';
                }
            });
        }
    }
});


        //////////////////////////////////////////////
    document.addEventListener("DOMContentLoaded", function () {
    // === CROPPIE INITIALIZATION ===
    const components = [1, 2, 3, 4];
    const croppieInstances = {};
    const croppedImageData = {};

    components.forEach(id => {
        const input = document.getElementById(`input${id}`);
        const previewImage = document.getElementById(`imgView${id}`);
        const croppieContainer = document.getElementById(`croppie-container-${id}`);
        const resultContainer = document.getElementById(`result-${id}`);
        const cropButton = document.getElementById(`crop-button-${id}`);
        const croppedImg = document.getElementById(`croppedImg${id}`);

        input.addEventListener('change', function () {
            if (this.files && this.files[0]) {
                const file = this.files[0];
                
                // Validate file type and size
                const allowedTypes = ["image/jpeg", "image/jpg", "image/png"];
                const maxSize = 5 * 1024 * 1024; // 5MB
                
                if (!allowedTypes.includes(file.type)) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Invalid File Type',
                        text: 'Only JPG, JPEG, and PNG files are allowed'
                    });
                    this.value = ''; // Clear the input
                    return;
                }
                
                if (file.size > maxSize) {
                    Swal.fire({
                        icon: 'error',
                        title: 'File Too Large',
                        text: 'Image size should not exceed 5MB'
                    });
                    this.value = ''; // Clear the input
                    return;
                }
                
                const reader = new FileReader();
                reader.onload = function (e) {
                    previewImage.src = e.target.result;
                    initCroppie(id, e.target.result);
                };
                reader.readAsDataURL(this.files[0]);
            }
        });

        function initCroppie(componentId, imageData) {
            if (croppieInstances[componentId]) {
                croppieInstances[componentId].destroy();
            }

            croppieInstances[componentId] = new Croppie(document.getElementById(`croppie-container-${componentId}`), {
                viewport: { width: 200, height: 200, type: 'square' },
                boundary: { width: 300, height: 300 },
                showZoomer: true,
            });

            croppieInstances[componentId].bind({ url: imageData });
        }

        cropButton.addEventListener('click', function () {
            if (croppieInstances[id]) {
                croppieInstances[id].result({
                    type: 'canvas',
                    size: 'viewport',
                    format: 'jpeg',
                    quality: 0.9
                }).then(function (croppedImage) {
                    croppedImg.src = croppedImage;
                    resultContainer.classList.remove('d-none');
                    
                    // Store cropped image data for form submission
                    croppedImageData[`image${id}`] = croppedImage;
                    
                    // Add a hidden input to the form to store this data
                    let hiddenInput = document.getElementById(`croppedData${id}`);
                    if (!hiddenInput) {
                        hiddenInput = document.createElement('input');
                        hiddenInput.type = 'hidden';
                        hiddenInput.id = `croppedData${id}`;
                        hiddenInput.name = `croppedImages[${id-1}]`;
                        document.getElementById('productForm').appendChild(hiddenInput);
                    }
                    hiddenInput.value = croppedImage;
                    
                    // Clear any image-related error message after successful cropping
                    clearError(document.getElementById(`input${id}`));
                });
            }
        });
    });

    // === FORM VALIDATION AND SUBMISSION ===
    const form = document.getElementById("productForm");
    
    // Function to show SweetAlert errors
    function showSwalError(title, message) {
        Swal.fire({
            icon: 'error',
            title: title,
            text: message,
            confirmButtonColor: '#3085d6'
        });
    }
    
    // Function to show SweetAlert success
    function showSwalSuccess(title, message) {
        Swal.fire({
            icon: 'success',
            title: title,
            text: message,
            confirmButtonColor: '#3085d6'
        });
    }

    // Function to display field-specific validation errors
    function showError(field, message) {
        const fieldId = field.name || field.id;
        let errorDiv;
        
        // For fields within variant blocks
        if (fieldId.includes('[')) {
            // Replace brackets to make valid selector
            const selector = fieldId.replace(/\[/g, '\\[').replace(/\]/g, '\\]');
            errorDiv = document.querySelector(`#${selector}-error`);
        } else {
            errorDiv = document.getElementById(`${fieldId}-error`);
        }
        
        if (!errorDiv) {
            errorDiv = document.createElement("div");
            errorDiv.className = "error-message text-danger text-sm mt-1";
            errorDiv.id = `${fieldId}-error`;
            field.parentNode.appendChild(errorDiv);
        }
        
        errorDiv.textContent = message;
        field.classList.add('is-invalid');
        return false;
    }

    // Function to clear field-specific errors
    function clearError(field) {
        const fieldId = field.name || field.id;
        let errorDiv;
        
        // For fields within variant blocks
        if (fieldId.includes('[')) {
            // Replace brackets to make valid selector
            const selector = fieldId.replace(/\[/g, '\\[').replace(/\]/g, '\\]');
            errorDiv = document.querySelector(`#${selector}-error`);
        } else {
            errorDiv = document.getElementById(`${fieldId}-error`);
        }
        
        if (errorDiv) {
            errorDiv.textContent = "";
        }
        
        field.classList.remove('is-invalid');
    }

    // Form field validation functions
    function validateProductName(field) {
        const value = field.value;
        const trimmedValue = value.trim();

        if (!trimmedValue) {
            return showError(field, "Product name is required");
        }

        if (value.startsWith(' ')) {
            return showError(field, "Product name cannot start with space");
        }

        if (/^\s*$/.test(value)) {
            return showError(field, "Product name cannot contain only spaces");
        }

        if (value.endsWith(' ')) {
            return showError(field, "Product name cannot end with space");
        }

        if (trimmedValue.length < 3) {
            return showError(field, "Product name must be at least 3 characters long");
        }

        if (trimmedValue.length > 100) {
            return showError(field, "Product name cannot exceed 100 characters");
        }

        if (!/^[a-zA-Z0-9\s\-&()']+$/.test(value)) {
            return showError(field, "Product name can only contain letters, numbers, spaces, hyphens, &, parentheses and single quotes");
        }

        clearError(field);
        return true;
    }

    function validateDescription(field) {
        const value = field.value;
        const trimmedValue = value.trim();
        
        if (!trimmedValue) {
            return showError(field, "Description is required");
        }

        if (value.startsWith(' ')) {
            return showError(field, "Description cannot start with space");
        }

        if (/^\s*$/.test(value)) {
            return showError(field, "Description cannot contain only spaces");
        }

        if (trimmedValue.length < 8) {
            return showError(field, "Description must be at least 8 characters long");
        }

        if (trimmedValue.length > 1000) {
            return showError(field, "Description cannot exceed 1000 characters");
        }

        if (value.endsWith(' ')) {
            return showError(field, "Description cannot end with space");
        }

        clearError(field);
        return true;
    }

    function validateDropdown(field, fieldName) {
        if (!field.value) {
            return showError(field, `${fieldName} is required`);
        }
        clearError(field);
        return true;
    }

    function validateNumber(field, fieldName) {
        const value = field.value.trim();
        const isStock = fieldName.toLowerCase().includes('stock');

        if (!value) {
            return showError(field, `${fieldName} is required`);
        }

        const regex = isStock ? /^\d+$/ : /^\d+(\.\d{1,2})?$/;
        if (!regex.test(value)) {
            return showError(field, isStock 
                ? `${fieldName} must be a whole number`
                : `${fieldName} must be a non-negative number`);
        }

        if (/[$@!%*?&#^-]/.test(value)) {
            return showError(field, `${fieldName} cannot contain special characters like $, -, etc.`);
        }

        const numValue = parseFloat(value);

        if (value.length > 1 && value[0] === '0' && !value.includes('.')) {
            return showError(field, `${fieldName} cannot start with unnecessary zeros`);
        }

        if (numValue <= 0) {
            return showError(field, `${fieldName} must be greater than 0`);
        }

        if (isStock && numValue > 10000) {
            return showError(field, `${fieldName} cannot exceed 10,000`);
        }
        
        if (!isStock && numValue > 1000000) {
            return showError(field, `${fieldName} cannot exceed 1,000,000`);
        }

        clearError(field);
        return true;
    }

    function validateImage(field) {
        // First check if file is selected
        if (field.files.length === 0) {
            // Only show error for first image (mandatory)
            if (field.id === 'input1') {
                return showError(field, "At least one product image is required");
            }
            return true; // Other images are optional
        }
        
        // If file is selected, validate it
        const file = field.files[0];
        const allowedTypes = ["image/jpeg", "image/jpg", "image/png"];

        if (!allowedTypes.includes(file.type)) {
            return showError(field, "Only JPG, JPEG, and PNG files are allowed");
        }

        const maxSize = 5 * 1024 * 1024; // 5MB
        if (file.size > maxSize) {
            return showError(field, "Image size should not exceed 5MB");
        }

        // Check if image is cropped
        const componentId = field.id.replace('input', '');
        const croppedData = document.getElementById(`croppedData${componentId}`);
        
        if (!croppedData || !croppedData.value) {
            return showError(field, "Please crop the image before submitting");
        }

        clearError(field);
        return true;
    }

    // New function to validate ML size selections
    function validateSizeSelections() {
        let isValid = true;
        const sizeSelects = document.querySelectorAll('.size-select');
        const selectedSizes = new Set();
        
        // First check if all size dropdowns have values
        sizeSelects.forEach((select, index) => {
            if (!select.value) {
                isValid = showError(select, "ML size is required") && isValid;
            } else {
                // Check for duplicate sizes
                if (selectedSizes.has(select.value)) {
                    isValid = showError(select, "Duplicate ML size is not allowed") && isValid;
                } else {
                    selectedSizes.add(select.value);
                    clearError(select);
                }
            }
        });
        
        return isValid;
    }

    function validateVariants() {
        let isValid = true;
        document.querySelectorAll(".variant-item").forEach((variant, index) => {
            const stock = variant.querySelector(`input[name='variants[${index}][stock]']`);
            const regularPrice = variant.querySelector(`input[name='variants[${index}][regularPrice]']`);
            const salePrice = variant.querySelector(`input[name='variants[${index}][salesPrice]']`);
            const sizeSelect = variant.querySelector(`.size-select`);

            // Validate ML size
            if (sizeSelect && !sizeSelect.value) {
                isValid = showError(sizeSelect, "ML size is required") && isValid;
            } else if (sizeSelect) {
                clearError(sizeSelect);
            }

            // Validate stock
            isValid = validateNumber(stock, "Stock quantity") && isValid;
            
            // Validate regular price
            isValid = validateNumber(regularPrice, "Regular price") && isValid;

            // Validate sale price - now required
            if (!salePrice.value.trim()) {
                isValid = showError(salePrice, "Sale price is required") && isValid;
            } else {
                isValid = validateNumber(salePrice, "Sale price") && isValid;
                if (isValid && parseFloat(salePrice.value) >= parseFloat(regularPrice.value)) {
                    isValid = showError(salePrice, "Sale price must be less than regular price") && isValid;
                }
            }
        });
        
        // Check for duplicate ML sizes
        isValid = validateSizeSelections() && isValid;
        
        return isValid;
    }

    // Reference form fields
    const productName = document.getElementById("product_name");
    const description = document.querySelector("textarea[name='description']");
    const brand = document.querySelector("select[name='brand']");
    const category = document.querySelector("select[name='category']");
    const fileInputs = document.querySelectorAll("input[type='file']");

    // Add debounce function for input validation
    function debounce(func, wait) {
        let timeout;
        return function (...args) {
            clearTimeout(timeout);
            timeout = setTimeout(() => func.apply(this, args), wait);
        };
    }

    // Add event listeners for real-time validation
    productName.addEventListener("input", debounce(() => validateProductName(productName), 300));
    description.addEventListener("input", debounce(() => validateDescription(description), 300));
    brand.addEventListener("change", () => validateDropdown(brand, "Brand"));
    category.addEventListener("change", () => validateDropdown(category, "Category"));
    
    // Add validation for file inputs with cropping
    fileInputs.forEach(input => {
        input.addEventListener("change", () => validateImage(input));
    });

    // Handle paste events for description to maintain formatting
    description.addEventListener("paste", function (e) {
        e.preventDefault();
        const text = (e.originalEvent || e).clipboardData.getData('text/plain');
        document.execCommand("insertText", false, text);
    });

    // Listen for variant field changes including ML sizes
    document.querySelectorAll('.variant-item').forEach((variant, index) => {
        const stock = variant.querySelector(`input[name='variants[${index}][stock]']`);
        const regularPrice = variant.querySelector(`input[name='variants[${index}][regularPrice]']`);
        const salePrice = variant.querySelector(`input[name='variants[${index}][salesPrice]']`);
        const sizeSelect = variant.querySelector(`.size-select`);
        
        if (sizeSelect) {
            sizeSelect.addEventListener('change', () => {
                if (!sizeSelect.value) {
                    showError(sizeSelect, "ML size is required");
                } else {
                    clearError(sizeSelect);
                    validateSizeSelections(); // Check for duplicates when changing
                }
            });
        }
        
        if (stock) stock.addEventListener('input', debounce(() => validateNumber(stock, "Stock quantity"), 300));
        if (regularPrice) regularPrice.addEventListener('input', debounce(() => validateNumber(regularPrice, "Regular price"), 300));
        if (salePrice) {
            salePrice.addEventListener('input', debounce(() => {
                if (!salePrice.value.trim()) {
                    showError(salePrice, "Sale price is required");
                } else {
                    validateNumber(salePrice, "Sale price");
                    if (regularPrice.value.trim() && parseFloat(salePrice.value) >= parseFloat(regularPrice.value)) {
                        showError(salePrice, "Sale price must be less than regular price");
                    }
                }
            }, 300));
        }
    });

    // Function to check if at least first image is uploaded and cropped
    function validateRequiredImage() {
        const input1 = document.getElementById('input1');
        if (!input1.files || input1.files.length === 0) {
            showError(input1, "At least one product image is required");
            return false;
        }
        
        const croppedData1 = document.getElementById('croppedData1');
        if (!croppedData1 || !croppedData1.value) {
            showError(input1, "Please crop the first image before submitting");
            return false;
        }
        
        clearError(input1);
        return true;
    }

    // Modify form submission to use fetch
    form.addEventListener("submit", function (event) {
        event.preventDefault();
        let isValid = true;

        // Validate all required fields
        isValid = validateProductName(productName) && isValid;
        isValid = validateDescription(description) && isValid;
        isValid = validateDropdown(brand, "Brand") && isValid;
        isValid = validateDropdown(category, "Category") && isValid;

        isValid = validateRequiredImage() && isValid;
        
        for (let i = 2; i <= 4; i++) {
            const input = document.getElementById(`input${i}`);
            if (input.files.length > 0) {
                isValid = validateImage(input) && isValid;
            }
        }

        isValid = validateVariants() && isValid;

        if (isValid) {
            Swal.fire({
                title: 'Submitting...',
                text: 'Please wait while we process your request',
                allowOutsideClick: false,
                allowEscapeKey: false,
                didOpen: () => {
                    Swal.showLoading();
                }
            });

            const formData = new FormData(form);
            
            fetch('/admin/productAdd', {
                method: 'POST',
                body: formData
            })
            .then(response => {
                if (!response.ok) {
                    return response.json().then(data => {
                        throw new Error(data.message || "Server error occurred");
                    });
                }
                return response.json();
            })
            .then(data => {
                showSwalSuccess("Success", "Product added successfully!");
                setTimeout(() => {
                    window.location.reload();
                }, 1500);
            })
            .catch(error => {
                showSwalError("Error", error.message || "Failed to add product. Please try again.");
            });
        } else {
            // Show validation error summary
            showSwalError("Validation Error", "Please add the input fields properly!");
        }
    });
});


    </script>

    <%- include('../partials/admin/adminFooter.ejs') %>