<%- include('../partials/admin/adminHeader.ejs') %>


  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css">
  <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11.10.5/dist/sweetalert2.min.css" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.10.5/dist/sweetalert2.all.min.js"></script>
  <link rel="stylesheet" href="/assets/css/category.css">

  <style>
    .addOffer{
      color: white;
      text-decoration: none;
    }
    .addOffer:hover{
      color: rgb(7, 50, 61);
      text-decoration: none;
    }
  </style>

  <div class="main-content">
    <h1>Category Management</h1>

    <div class="category-container">
      <!-- Category Form -->
      <div class="category-form">
        <form id="categoryForm" action="/admin/addCategory" method="POST">
          <div class="form-group">
            <label for="name">Name</label>
            <input type="text" id="name" name="name" placeholder="Type here">
          </div>

          <div class="form-group">
            <label for="description">Description</label>
            <textarea id="description" name="description" placeholder="Type here"></textarea>
          </div>

          <button type="submit" class="create-btn">Create category</button>
        </form>
      </div>

      <!-- Categories Table -->
      <div class="table-container">
        <table class="category-table">
          <thead>
            <tr>
              <th>Name</th>
              <th>Description</th>
              <th>Offer Price</th>
              <th>Offer</th>
              <th>Status</th>
              <th>Edit</th>
            </tr>
          </thead>
          <tbody>
            <% cat.forEach((category)=> { %>
              <tr>
                <td>
                  <%= category.name %>
                </td>
                <td>
                  <%= category.description %>
                </td>
                <td>
                  <%= category.categoryOffer || 0 %>%
                </td>
                <td class="offer-buttons">
                  <% if(category.categoryOffer>0){ %>
                    <button class="btn btn-remove" onclick="removeOffer('<%= category._id %>')">Remove</button>
                  <%}else{%>
                    <button class="btn btn-add-offer"><a href="/admin/getCategoryOffer?id=<%= category._id%>" class="addOffer">Add</a></button>
                  <%}%>
                </td>
                <td>
                  <div class="status-buttons">
                    <% if(category.islisted===true) { %>
                      <button class="btn btn-listed" onclick="updateCategoryStatus('<%= category._id %>', false)">
                        Unlist
                      </button>
                      <% } else { %>
                        <button class="btn btn-unlisted" onclick="updateCategoryStatus('<%= category._id %>', true)">
                          List
                        </button>
                        <% } %>
                  </div>
                </td>
                <td>
                  <a href="/admin/editCategory?id=<%=category._id%>" class="btn btn-edit"> Edit </a>
                </td>
              </tr>
              <% }); %>
          </tbody>
        </table>
      </div>
    </div>
  </div>


  <!-- Pagination -->
  <div class="pagination-container" style="text-align: center; margin: 20px auto 0;">

    <div class="pagination">
        <%# Previous button %>
        <% if (currentPage > 1) { %>
            <a href="?page=<%= currentPage - 1 %>" class="pagination-btn">
                &laquo; Prev
            </a>
        <% } else { %>
            <span class="pagination-btn disabled">
                &laquo; Prev
            </span>
        <% } %>

        <%# Page numbers %>
        <% for (let i = 1; i <= totalPages; i++) { %>
            <% if (i === currentPage) { %>
                <span class="pagination-btn current-page">
                    <%= i %>
                </span>
            <% } else { %>
                <a href="?page=<%= i %>" class="pagination-btn">
                    <%= i %>
                </a>
            <% } %>
        <% } %>

        <% if (currentPage < totalPages) { %>
            <a href="?page=<%= currentPage + 1 %>" class="pagination-btn">
                Next &raquo;
            </a>
        <% } else { %>
            <span class="pagination-btn disabled">
                Next &raquo;
            </span>
        <% } %>
    </div>

</div>


  <script>
    document.getElementById('categoryForm').addEventListener('submit', async (e) => {
      e.preventDefault();

      const nameInput = document.getElementById('name');
      const descriptionInput = document.getElementById('description');

      nameInput.style.borderColor = '';
      descriptionInput.style.borderColor = '';

      const validateForm = () => {
        let isValid = true;
        const errors = [];

        const nameValue = nameInput.value;
        const nameRegex = /^[a-zA-Z0-9][a-zA-Z0-9\s]*$/;

        if (!nameValue.trim()) {
          isValid = false;
          errors.push("Name field is required and cannot contain only spaces");
          nameInput.style.borderColor = 'red';
        } else if (!nameRegex.test(nameValue)) {
          isValid = false;
          errors.push("Name should start with a letter or number");
          nameInput.style.borderColor = 'red';
        }

        const descriptionValue = descriptionInput.value.trim();

        if (!descriptionValue) {
          isValid = false;
          errors.push("Description field is required");
          descriptionInput.style.borderColor = 'red';
        } else if (descriptionValue.length < 10) {
          isValid = false;
          errors.push("Description must contain at least 10 characters");
          descriptionInput.style.borderColor = 'red';
        }

        return { isValid, errors };
      };

      const { isValid, errors } = validateForm();

      if (!isValid) {
        Swal.fire({
          title: "Ooops!",
          html: errors.join('<br>'),
          icon: 'error',
          showClass: {
            popup: 'animate__animated animate__fadeInUp animate__faster'
          },
          hideClass: {
            popup: 'animate__animated animate__fadeOutDown animate__faster'
          }
        });
        return;
      }

      const formData = new FormData(e.target);
      const data = {
        name: formData.get('name').trim(),
        description: formData.get('description')
      };

      try {
        const response = await fetch('/admin/addCategory', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(data)
        });

        const result = await response.json();

        if (!response.ok) {
          Swal.fire({
            title: "Category Already Exists",
            text: result.error,
            icon: 'warning',
            showClass: {
              popup: 'animate__animated animate__fadeInUp animate__faster'
            },
            hideClass: {
              popup: 'animate__animated animate__fadeOutDown animate__faster'
            }
          });
        } else {
          Swal.fire({
            title: "Success",
            text: "Category added successfully",
            icon: 'success',
            showClass: {
              popup: 'animate__animated animate__fadeInUp animate__faster'
            },
            hideClass: {
              popup: 'animate__animated animate__fadeOutDown animate__faster'
            }
          }).then(() => {
            window.location.href = '/admin/category';
          });
        }
      } catch (error) {
        Swal.fire({
          title: "Error",
          text: "Something went wrong",
          icon: 'error',
          showClass: {
            popup: 'animate__animated animate__fadeInUp animate__faster'
          },
          hideClass: {
            popup: 'animate__animated animate__fadeOutDown animate__faster'
          }
        });
      }
    });

    async function updateCategoryStatus(categoryId, shouldList) {
  const action = shouldList ? 'list' : 'unlist';
  const confirmResult = await Swal.fire({
    title: `Confirm ${action.charAt(0).toUpperCase() + action.slice(1)}`,
    text: `Are you sure you want to ${action} this category?`,
    icon: 'question',
    showCancelButton: true,
    confirmButtonText: `Yes, ${action} it!`,
    cancelButtonText: 'Cancel',
    showClass: {
      popup: 'animate__animated animate__fadeInUp animate__faster'
    },
    hideClass: {
      popup: 'animate__animated animate__fadeOutDown animate__faster'
    }
  });

  if (confirmResult.isConfirmed) {
    try {
      Swal.fire({
        title: 'Processing...',
        text: 'Please wait while we update the category status',
        allowOutsideClick: false,
        didOpen: () => {
          Swal.showLoading();
        },
        showClass: {
          popup: 'animate__animated animate__fadeInUp animate__faster'
        }
      });

      const endpoint = shouldList ? '/admin/listcategory' : '/admin/unlistcategory';
      const response = await fetch(endpoint, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ id: categoryId })
      });

      if (response.ok) {
        const result = await Swal.fire({
          title: 'Success!',
          text: `Category ${shouldList ? 'listed' : 'unlisted'} successfully`,
          icon: 'success',
          showClass: {
            popup: 'animate__animated animate__fadeInUp animate__faster'
          },
          hideClass: {
            popup: 'animate__animated animate__fadeOutDown animate__faster'
          }
        });
        
        if (result.isConfirmed || result.isDismissed) {
          window.location.reload();
        }
      } else {
        const errorData = await response.json();
        Swal.fire({
          title: 'Error',
          text: errorData.message || `Failed to ${action} category`,
          icon: 'error',
          showClass: {
            popup: 'animate__animated animate__fadeInUp animate__faster'
          },
          hideClass: {
            popup: 'animate__animated animate__fadeOutDown animate__faster'
          }
        });
      }
    } catch (error) {
      console.error('Error:', error);
      Swal.fire({
        title: 'Error',
        text: `Something went wrong while trying to ${action} the category`,
        icon: 'error',
        showClass: {
          popup: 'animate__animated animate__fadeInUp animate__faster'
        },
        hideClass: {
          popup: 'animate__animated animate__fadeOutDown animate__faster'
        }
      });
    }
  }
}

async function removeOffer(categoryId){
  try {
    const result = await Swal.fire({
      title: "Are you sure?",
      text: "Do you want to remove this category offer?",
      icon: "warning",
      showCancelButton: true,
      confirmButtonColor: "#3085d6",
      cancelButtonColor: "#d33",
      confirmButtonText: "Remove",
      cancelButtonText: "Cancel"
    });

    if (result.isConfirmed) {
      const response = await fetch('/admin/removeCategoryOffer', {
        method: "POST",
        headers: {
          "content-type": "application/json"
        },
        body: JSON.stringify({
          categoryId: categoryId,
        })
      });
      
      const data = await response.json();

      if(response.ok && data.success === true) {
        Swal.fire(
          "Removed!",
          "The offer has been removed successfully.",
          "success"
        ).then(() => {
          window.location.href = "/admin/category";
        });
      } else {
        Swal.fire("Failed", data.message || "Removing offer failed", "error");
      }
    } else {
      window.location.href = "/admin/category";
    }
  } catch (error) {
    Swal.fire(
      "Error",
      "An error occurred while removing the offer",
      "error"
    );
    console.error("Error removing offer", error);
  }
}
  </script>